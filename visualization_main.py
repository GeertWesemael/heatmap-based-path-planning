import pickle
import heatmap
import map_
import path
import actor
import prob_heatmap
import robot
import world
import astar
import zone
import createactors
import matplotlib.pyplot as plt
from timefunct import sec_to_hour, hour_min_to_sec
from timefunct import random_time_between, random_time_between_, sec_to_hour_min_string
#
# matrix_map1 = [[1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
#                [1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
#                [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
#                [1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#                [1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
#                [1, 0, 1, 1, 1, 0, 0, 0, 0, 0],
#                [1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
#                [1, 1, 1, 1, 1, 1, 0, 1, 1, 1]]
# map1 = map_.Map(matrix_map1)
# zone_a = zone.Zone("zone_a", "A", [(3, 3), (3, 4), (4, 3), (4, 4)])
# zone_b = zone.Zone("zone_b", "B", [(9, 2), (9, 3), (9, 4), (9, 5)])
# zone_c = zone.Zone("zone_c", "C", [(6, 0)])
# zone_d = zone.Zone("zone_d", "D", [(6, 7)])
# zones = [zone_a, zone_b, zone_c, zone_d]
# zone.print_zone(map1, zones)
# all_zones = zone.Zone.combined_zones(zones)
#
# world1 = world.World(map1)
# world1.plot_world()
#
# print("Run easy setup")
# filename = 'easy_scenario_worlds_'
# infile = open(filename, 'rb')
# list_of_worlds = pickle.load(infile)
# infile.close()
# print("Unpickled")
#
# world1 = list_of_worlds[0]
# world_test = list_of_worlds[99]
# world_tests = list_of_worlds[10:100]
# print(len(world_tests))
# list_of_worlds = list_of_worlds[0:10]
# print(len(list_of_worlds))
# # test
#
# world1.plot_world(hours=True,fr=hour_min_to_sec(9, 30),to=hour_min_to_sec(13, 0), title="Actors walking towards the center")
#
# # total heatmap
# heatm = heatmap.Heatmap(world1, sample_rate=1, scale=1)
# heatm.visualize_heatmap()
#
# # moment heatmaps
# interval = hour_min_to_sec(0, 10)
# start = hour_min_to_sec(9, 30)
# end = hour_min_to_sec(13, 0)
# heatmaps = heatmap.heatmap_for_each_interval(world1, interval, start_time=start, end_time=end,
#                                              sample_rate=1, scale=1)
# # for i in heatmaps:
# #     i.visualize_heatmap(title= "heatmap from " + str(sec_to_hour_min_string(i.start_time)) + " to " + str(sec_to_hour_min_string(i.end_time)))
# # heatmap.animate_heatmaps(heatmaps)
#
# print("heatmap stuff done")
#
# prob_heatmaps = prob_heatmap.heatmap_for_each_interval(list_of_worlds, interval, start_time=start, end_time=end,
#                                                        sample_rate=1, scale=1)
# # prob_heatmap.animate_heatmaps(prob_heatmaps)
# for i in prob_heatmaps:
#     i.visualize_heatmap(title= "heatmap from " + str(sec_to_hour_min_string(i.start_time)) + " to " + str(sec_to_hour_min_string(i.end_time)))
#
#
# print("prob heatmap stuff done")
#
# map1 = world1.get_map()
# zone_c = zone.Zone("zone_c", "C", [(6, 0)])
# zone_d = zone.Zone("zone_d", "D", [(6, 7)])
# start_loc_robot = zone_d.get_random_location()
# end_loc_robot = zone_c.get_random_location()
#
# path_self_made = {0: (6, 7), 1: (6, 7), 2.4: (5, 6), 3.4: (4, 6), 4.4: (3, 6), 5.4: (2, 6), 6.8: (1, 5), 7.8: (1, 4), 8.8: (1, 3), 9.8: (1, 2), 11.2: (2, 1), 12.2: (3, 1), 13.2: (4, 1), 14.2: (5, 1), 15.6: (6, 0)}
# p = path.Path(path_self_made)
# a_1 = actor.Actor(p, map1)
# a_1.plot_path()
# a_1.print_path()
# a_1.path.plot_path(map1,"example path")
#
#
# world1.actors = []
# path_actor_horizontal = {0:(4,4), 1:(4,4), 2:(4,4), 3:(5,4), 4:(6,4), 5:(7,4), 6:(8,4), 7:(9,4) , 8:(9,4) , 9:(9,4) , 10:(9,4)}
# p_hor = path.Path(path_actor_horizontal)
# a_2 = actor.Actor(p_hor,map1)
# world1.add_actor(a_2)
#
# r = robot.Robot((6,7), 0, map1)
# r.plan_path_waiting_at_encounter(world1, (6,0), 0.1,distance=1,wait_time=2)
# # r.evaluate_collisions_worlds(world_tests, 0.1)
# r.path.plot_path(map1)
# world1.plot_world(robots=[r],fr=0,to=10,title="Robot waiting for actor")
# print(world1.actors[0].path.path_list)
# print(r.path.path_list)
#
# world1.plot_world(hours=True,fr=hour_min_to_sec(8, 0),to=hour_min_to_sec(8, 10))

matrix_map2 = [[1, 1, 1, 1, 1, 1, 1, 0, 1],
               [1, 0, 0, 0, 0, 0, 0, 0, 1],
               [1, 0, 1, 1, 1, 1, 1, 0, 1],
               [1, 0, 1, 0, 0, 0, 1, 0, 1],
               [1, 0, 0, 0, 0, 0, 0, 0, 1],
               [1, 0, 1, 0, 0, 0, 1, 0, 1],
               [0, 0, 1, 1, 1, 1, 1, 0, 0],
               [1, 0, 1, 0, 0, 0, 1, 0, 1],
               [1, 0, 0, 0, 0, 0, 0, 0, 1],
               [1, 0, 1, 0, 0, 0, 1, 0, 1],
               [1, 0, 1, 1, 1, 1, 1, 0, 1],
               [1, 0, 0, 0, 0, 0, 0, 0, 1],
               [1, 1, 1, 1, 1, 1, 1, 0, 1]]
map2 = map_.Map(matrix_map2)
world2 = world.World(map2)
world2.plot_world()

print("Run hard setup")
filename = 'hard_scenario_worlds_1_20'
infile = open(filename, 'rb')
list_of_worlds = pickle.load(infile)
infile.close()
print("Unpickled")

filename = 'hard_scenario_worlds_2_20'
infile = open(filename, 'rb')
list_of_worlds_2 = pickle.load(infile)
infile.close()
print("Unpickled")


world1 = list_of_worlds[0]
world_test = list_of_worlds[99]
world_tests = list_of_worlds[10:100]
print(len(world_tests))
list_of_worlds = list_of_worlds[0:10]
print(len(list_of_worlds))
list_of_worlds[0].plot_world(hours=True,fr=hour_min_to_sec(9,30),to=hour_min_to_sec(10,30)) #bugg
list_of_worlds[1].plot_world(hours=True,fr=hour_min_to_sec(9,30),to=hour_min_to_sec(10,30)) #bugg

world2 = list_of_worlds_2[0]
world_test_2 = list_of_worlds_2[99]
world_tests_2 = list_of_worlds_2[10:100]
print(len(world_tests_2))
list_of_worlds_2 = list_of_worlds_2[0:10]
print(len(list_of_worlds_2))
list_of_worlds_2[0].plot_world(hours=True,fr=hour_min_to_sec(9,30),to=hour_min_to_sec(10,30)) #bugg
list_of_worlds_2[1].plot_world(hours=True,fr=hour_min_to_sec(9,30),to=hour_min_to_sec(10,30)) #bugg

prob_heatmaps = prob_heatmap.heatmap_for_each_interval(list_of_worlds, hour_min_to_sec(0,10), start_time=hour_min_to_sec(9,0), end_time=hour_min_to_sec(11,0),
                                                       sample_rate=1, scale=1)
# prob_heatmap.animate_heatmaps(prob_heatmaps)
for i in prob_heatmaps:
    i.visualize_heatmap(title= "heatmap from " + str(sec_to_hour_min_string(i.start_time)) + " to " + str(sec_to_hour_min_string(i.end_time)))



world2.actors = []

path1 = path.Path({36000: (0, 6), 36001: (0, 6), 36002.4: (1, 7), 36003.8: (2, 8), 36004.8: (3, 8), 36005.8: (4, 8), 36006.8: (5, 8), 36007.8: (6, 8), 36009.200000000004: (7, 7), 36010.600000000006: (8, 6)})
a1 = actor.Actor(path1,map2)
world2.add_actor(a1)

path1 = path.Path({36000: (0, 6), 36001: (0, 6), 36002.4: (1, 7), 36003.8: (2, 8), 36005.200000000004: (3, 7), 36006.200000000004: (4, 7), 36007.200000000004: (5, 7), 36008.600000000006: (6, 8), 36010.00000000001: (7, 7), 36011.40000000001: (8, 6)})
a1 = actor.Actor(path1,map2)
world2.add_actor(a1)

path1 = path.Path({36000: (0, 6), 36001: (0, 6), 36002.4: (1, 5), 36003.4: (1, 4), 36004.4: (1, 3), 36005.4: (1, 2), 36006.8: (2, 1), 36007.8: (3, 1), 36008.8: (4, 1), 36009.8: (5, 1), 36010.8: (6, 1), 36012.200000000004: (7, 2), 36013.200000000004: (7, 3), 36014.200000000004: (7, 4), 36015.200000000004: (7, 5), 36016.600000000006: (8, 6)})
a1 = actor.Actor(path1,map2)
world2.add_actor(a1)

path1 = path.Path({36000: (0, 6), 36001: (0, 6), 36002.4: (1, 7), 36003.4: (1, 8), 36004.4: (1, 9), 36005.4: (1, 10), 36006.8: (2, 11), 36007.8: (3, 11), 36008.8: (4, 11), 36009.8: (5, 11), 36010.8: (6, 11), 36012.200000000004: (7, 10), 36013.200000000004: (7, 9), 36014.200000000004: (7, 8), 36015.200000000004: (7, 7), 36016.600000000006: (8, 6)})
a1 = actor.Actor(path1,map2)
world2.add_actor(a1)

path1 = path.Path({36000: (0, 6), 36001: (0, 6), 36002.4: (1, 5), 36002.59999999998: (1.1428571428393242, 4.857142857160675), 36004.59999999998: (1.1428571428393242, 4.857142857160675), 36004.699999999975: (1.214285714266782, 4.785714285733218), 36006.699999999975: (1.214285714266782, 4.785714285733218), 36006.799999999974: (1.2857142856942398, 4.714285714305761), 36008.799999999974: (1.2857142856942398, 4.714285714305761), 36008.89999999997: (1.3571428571216977, 4.642857142878303), 36010.89999999997: (1.3571428571216977, 4.642857142878303), 36010.99999999997: (1.4285714285491555, 4.571428571450846), 36012.99999999997: (1.4285714285491555, 4.571428571450846), 36013.09999999997: (1.4999999999766132, 4.5000000000233875), 36015.09999999997: (1.4999999999766132, 4.5000000000233875), 36015.19999999997: (1.5714285714040708, 4.42857142859593), 36017.19999999997: (1.5714285714040708, 4.42857142859593), 36017.29999999997: (1.6428571428315286, 4.357142857168472), 36019.29999999997: (1.6428571428315286, 4.357142857168472), 36019.399999999965: (1.7142857142589865, 4.285714285741014), 36021.399999999965: (1.7142857142589865, 4.285714285741014), 36021.49999999996: (1.785714285686444, 4.214285714313556), 36023.49999999996: (1.785714285686444, 4.214285714313556), 36023.59999999996: (1.857142857113902, 4.142857142886099), 36025.59999999996: (1.857142857113902, 4.142857142886099), 36025.69999999996: (1.9285714285413595, 4.0714285714586405), 36027.69999999996: (1.9285714285413595, 4.0714285714586405), 36027.79999999996: (1.9999999999688174, 4.000000000031183), 36029.79999999996: (1.9999999999688174, 4.000000000031183), 36029.8: (2, 4), 36029.89999999996: (2.099999999954889, 4.0), 36031.89999999996: (2.099999999954889, 4.0), 36031.999999999956: (2.199999999953434, 4.0), 36033.999999999956: (2.199999999953434, 4.0), 36035.999999999956: (2.199999999953434, 4.0), 36036.099999999955: (2.2999999999519787, 4.0), 36038.099999999955: (2.2999999999519787, 4.0), 36040.099999999955: (2.2999999999519787, 4.0), 36040.19999999995: (2.3999999999505235, 4.0), 36042.19999999995: (2.3999999999505235, 4.0), 36044.19999999995: (2.3999999999505235, 4.0), 36044.29999999995: (2.4999999999490683, 4.0), 36046.29999999995: (2.4999999999490683, 4.0), 36048.29999999995: (2.4999999999490683, 4.0), 36048.39999999995: (2.599999999947613, 4.0), 36050.39999999995: (2.599999999947613, 4.0), 36052.39999999995: (2.599999999947613, 4.0), 36054.39999999995: (2.599999999947613, 4.0), 36054.49999999995: (2.699999999946158, 4.0), 36056.49999999995: (2.699999999946158, 4.0), 36058.49999999995: (2.699999999946158, 4.0), 36060.49999999995: (2.699999999946158, 4.0), 36060.59999999995: (2.7999999999447027, 4.0), 36062.59999999995: (2.7999999999447027, 4.0), 36064.59999999995: (2.7999999999447027, 4.0), 36066.59999999995: (2.7999999999447027, 4.0), 36066.699999999946: (2.8999999999432475, 4.0), 36068.699999999946: (2.8999999999432475, 4.0), 36070.699999999946: (2.8999999999432475, 4.0), 36072.699999999946: (2.8999999999432475, 4.0), 36072.799999999945: (2.9999999999417923, 4.0), 36074.799999999945: (2.9999999999417923, 4.0), 36076.799999999945: (2.9999999999417923, 4.0), 36078.799999999945: (2.9999999999417923, 4.0), 36078.8: (3, 4), 36078.89999999994: (3.099999999940337, 4.0), 36080.89999999994: (3.099999999940337, 4.0), 36082.89999999994: (3.099999999940337, 4.0), 36084.89999999994: (3.099999999940337, 4.0), 36084.99999999994: (3.199999999938882, 4.0), 36086.99999999994: (3.199999999938882, 4.0), 36088.99999999994: (3.199999999938882, 4.0), 36090.99999999994: (3.199999999938882, 4.0), 36092.99999999994: (3.199999999938882, 4.0), 36093.09999999994: (3.2999999999374268, 4.0), 36095.09999999994: (3.2999999999374268, 4.0), 36097.09999999994: (3.2999999999374268, 4.0), 36099.09999999994: (3.2999999999374268, 4.0), 36101.09999999994: (3.2999999999374268, 4.0), 36101.19999999994: (3.3999999999359716, 4.0), 36103.19999999994: (3.3999999999359716, 4.0), 36105.19999999994: (3.3999999999359716, 4.0), 36107.19999999994: (3.3999999999359716, 4.0), 36109.19999999994: (3.3999999999359716, 4.0), 36109.29999999994: (3.4999999999345164, 4.0), 36111.29999999994: (3.4999999999345164, 4.0), 36113.29999999994: (3.4999999999345164, 4.0), 36115.29999999994: (3.4999999999345164, 4.0), 36117.29999999994: (3.4999999999345164, 4.0), 36119.29999999994: (3.4999999999345164, 4.0), 36119.399999999936: (3.599999999933061, 4.0), 36121.399999999936: (3.599999999933061, 4.0), 36123.399999999936: (3.599999999933061, 4.0), 36125.399999999936: (3.599999999933061, 4.0), 36127.399999999936: (3.599999999933061, 4.0), 36129.399999999936: (3.599999999933061, 4.0), 36129.499999999935: (3.699999999931606, 4.0), 36131.499999999935: (3.699999999931606, 4.0), 36133.499999999935: (3.699999999931606, 4.0), 36135.499999999935: (3.699999999931606, 4.0), 36137.499999999935: (3.699999999931606, 4.0), 36137.59999999993: (3.799999999930151, 4.0), 36139.59999999993: (3.799999999930151, 4.0), 36141.59999999993: (3.799999999930151, 4.0), 36143.59999999993: (3.799999999930151, 4.0), 36145.59999999993: (3.799999999930151, 4.0), 36145.69999999993: (3.8999999999286956, 4.0), 36147.69999999993: (3.8999999999286956, 4.0), 36149.69999999993: (3.8999999999286956, 4.0), 36151.69999999993: (3.8999999999286956, 4.0), 36153.69999999993: (3.8999999999286956, 4.0), 36155.69999999993: (3.8999999999286956, 4.0), 36155.79999999993: (3.9999999999272404, 4.0), 36157.79999999993: (3.9999999999272404, 4.0), 36159.79999999993: (3.9999999999272404, 4.0), 36161.79999999993: (3.9999999999272404, 4.0), 36163.79999999993: (3.9999999999272404, 4.0), 36165.79999999993: (3.9999999999272404, 4.0), 36165.8: (4, 4), 36165.89999999993: (4.099999999925785, 4.0), 36167.89999999993: (4.099999999925785, 4.0), 36169.89999999993: (4.099999999925785, 4.0), 36171.89999999993: (4.099999999925785, 4.0), 36173.89999999993: (4.099999999925785, 4.0), 36175.89999999993: (4.099999999925785, 4.0), 36175.99999999993: (4.19999999992433, 4.0), 36177.99999999993: (4.19999999992433, 4.0), 36179.99999999993: (4.19999999992433, 4.0), 36181.99999999993: (4.19999999992433, 4.0), 36183.99999999993: (4.19999999992433, 4.0), 36185.99999999993: (4.19999999992433, 4.0), 36186.099999999926: (4.299999999922875, 4.0), 36188.099999999926: (4.299999999922875, 4.0), 36190.099999999926: (4.299999999922875, 4.0), 36192.099999999926: (4.299999999922875, 4.0), 36194.099999999926: (4.299999999922875, 4.0), 36196.099999999926: (4.299999999922875, 4.0), 36198.099999999926: (4.299999999922875, 4.0), 36198.199999999924: (4.39999999992142, 4.0), 36200.199999999924: (4.39999999992142, 4.0), 36202.199999999924: (4.39999999992142, 4.0), 36204.199999999924: (4.39999999992142, 4.0), 36206.199999999924: (4.39999999992142, 4.0), 36208.199999999924: (4.39999999992142, 4.0), 36210.199999999924: (4.39999999992142, 4.0), 36210.29999999992: (4.4999999999199645, 4.0), 36212.29999999992: (4.4999999999199645, 4.0), 36214.29999999992: (4.4999999999199645, 4.0), 36216.29999999992: (4.4999999999199645, 4.0), 36218.29999999992: (4.4999999999199645, 4.0), 36220.29999999992: (4.4999999999199645, 4.0), 36222.29999999992: (4.4999999999199645, 4.0), 36224.29999999992: (4.4999999999199645, 4.0), 36224.39999999992: (4.599999999918509, 4.0), 36226.39999999992: (4.599999999918509, 4.0), 36228.39999999992: (4.599999999918509, 4.0), 36230.39999999992: (4.599999999918509, 4.0), 36232.39999999992: (4.599999999918509, 4.0), 36234.39999999992: (4.599999999918509, 4.0), 36236.39999999992: (4.599999999918509, 4.0), 36238.39999999992: (4.599999999918509, 4.0), 36238.49999999992: (4.699999999917054, 4.0), 36240.49999999992: (4.699999999917054, 4.0), 36242.49999999992: (4.699999999917054, 4.0), 36244.49999999992: (4.699999999917054, 4.0), 36246.49999999992: (4.699999999917054, 4.0), 36248.49999999992: (4.699999999917054, 4.0), 36250.49999999992: (4.699999999917054, 4.0), 36252.49999999992: (4.699999999917054, 4.0), 36254.49999999992: (4.699999999917054, 4.0), 36254.59999999992: (4.799999999915599, 4.0), 36256.59999999992: (4.799999999915599, 4.0), 36258.59999999992: (4.799999999915599, 4.0), 36260.59999999992: (4.799999999915599, 4.0), 36262.59999999992: (4.799999999915599, 4.0), 36264.59999999992: (4.799999999915599, 4.0), 36266.59999999992: (4.799999999915599, 4.0), 36268.59999999992: (4.799999999915599, 4.0), 36270.59999999992: (4.799999999915599, 4.0), 36270.69999999992: (4.899999999914144, 4.0), 36272.69999999992: (4.899999999914144, 4.0), 36274.69999999992: (4.899999999914144, 4.0), 36276.69999999992: (4.899999999914144, 4.0), 36278.69999999992: (4.899999999914144, 4.0), 36280.69999999992: (4.899999999914144, 4.0), 36282.69999999992: (4.899999999914144, 4.0), 36284.69999999992: (4.899999999914144, 4.0), 36284.799999999916: (4.9999999999126885, 4.0), 36286.799999999916: (4.9999999999126885, 4.0), 36288.799999999916: (4.9999999999126885, 4.0), 36290.799999999916: (4.9999999999126885, 4.0), 36292.799999999916: (4.9999999999126885, 4.0), 36294.799999999916: (4.9999999999126885, 4.0), 36296.799999999916: (4.9999999999126885, 4.0), 36296.8: (5, 4), 36296.899999999914: (5.099999999911233, 4.0), 36298.899999999914: (5.099999999911233, 4.0), 36300.899999999914: (5.099999999911233, 4.0), 36302.899999999914: (5.099999999911233, 4.0), 36304.899999999914: (5.099999999911233, 4.0), 36306.899999999914: (5.099999999911233, 4.0), 36306.99999999991: (5.199999999909778, 4.0), 36308.99999999991: (5.199999999909778, 4.0), 36310.99999999991: (5.199999999909778, 4.0), 36312.99999999991: (5.199999999909778, 4.0), 36314.99999999991: (5.199999999909778, 4.0), 36316.99999999991: (5.199999999909778, 4.0), 36317.09999999991: (5.299999999908323, 4.0), 36319.09999999991: (5.299999999908323, 4.0), 36321.09999999991: (5.299999999908323, 4.0), 36323.09999999991: (5.299999999908323, 4.0), 36325.09999999991: (5.299999999908323, 4.0), 36327.09999999991: (5.299999999908323, 4.0), 36327.19999999991: (5.399999999906868, 4.0), 36329.19999999991: (5.399999999906868, 4.0), 36331.19999999991: (5.399999999906868, 4.0), 36333.19999999991: (5.399999999906868, 4.0), 36335.19999999991: (5.399999999906868, 4.0), 36335.29999999991: (5.4999999999054126, 4.0), 36337.29999999991: (5.4999999999054126, 4.0), 36339.29999999991: (5.4999999999054126, 4.0), 36341.29999999991: (5.4999999999054126, 4.0), 36343.29999999991: (5.4999999999054126, 4.0), 36343.39999999991: (5.599999999903957, 4.0), 36345.39999999991: (5.599999999903957, 4.0), 36347.39999999991: (5.599999999903957, 4.0), 36349.39999999991: (5.599999999903957, 4.0), 36351.39999999991: (5.599999999903957, 4.0), 36351.499999999905: (5.699999999902502, 4.0), 36353.499999999905: (5.699999999902502, 4.0), 36355.499999999905: (5.699999999902502, 4.0), 36355.599999999904: (5.799999999901047, 4.0), 36357.599999999904: (5.799999999901047, 4.0), 36359.599999999904: (5.799999999901047, 4.0), 36359.6999999999: (5.899999999899592, 4.0), 36361.6999999999: (5.899999999899592, 4.0), 36363.6999999999: (5.899999999899592, 4.0), 36363.7999999999: (5.999999999898137, 4.0), 36365.7999999999: (5.999999999898137, 4.0), 36365.8: (6, 4), 36365.8999999999: (6.071428571354698, 4.071428571354698), 36367.8999999999: (6.071428571354698, 4.071428571354698), 36367.9999999999: (6.142857142782155, 4.142857142782155), 36369.9999999999: (6.142857142782155, 4.142857142782155), 36370.0999999999: (6.214285714209613, 4.214285714209613), 36372.0999999999: (6.214285714209613, 4.214285714209613), 36372.199999999895: (6.285714285637071, 4.285714285637071), 36374.199999999895: (6.285714285637071, 4.285714285637071), 36374.299999999894: (6.357142857064528, 4.357142857064528), 36376.299999999894: (6.357142857064528, 4.357142857064528), 36376.39999999989: (6.428571428491987, 4.428571428491987), 36378.39999999989: (6.428571428491987, 4.428571428491987), 36378.49999999989: (6.499999999919444, 4.499999999919444), 36380.49999999989: (6.499999999919444, 4.499999999919444), 36380.59999999989: (6.571428571346902, 4.571428571346902), 36382.59999999989: (6.571428571346902, 4.571428571346902), 36382.69999999989: (6.64285714277436, 4.64285714277436), 36384.69999999989: (6.64285714277436, 4.64285714277436), 36384.79999999989: (6.714285714201818, 4.714285714201818), 36386.79999999989: (6.714285714201818, 4.714285714201818), 36387.200000000004: (7, 5), 36388.600000000006: (8, 6)})
a1 = actor.Actor(path1,map2)
world2.add_actor(a1)

world2.plot_world(title="different paths",fr=36000,to=36388.600000000006)

# look at it again later

# heatm1 = heatmap.Heatmap(world1, sample_rate=1, scale=1)
# heatm2 = heatmap.Heatmap(world2, sample_rate=1, scale=1)

# prob_heatmaps1 = prob_heatmap.heatmap_for_each_interval(list_of_worlds, hour_min_to_sec(0,30), start_time=hour_min_to_sec(9,30), end_time=hour_min_to_sec(10,30),
#                                                        sample_rate=1, scale=1)
#
# prob_heatmaps2 = prob_heatmap.heatmap_for_each_interval(list_of_worlds, hour_min_to_sec(0,30), start_time=hour_min_to_sec(9,30), end_time=hour_min_to_sec(10,30),
#                                                        sample_rate=1, scale=1)
#
# r1 = robot.Robot((0,6), hour_min_to_sec(10,0), matrix_map2)
# r1.weighted_astar_path_plan_timeframes((8,6), prob_heatmaps1, 90)
#
# r2 = robot.Robot((0,6), hour_min_to_sec(10,0), matrix_map2)
# r2.weighted_astar_path_plan_timeframes((8,6), prob_heatmaps2, 90)
#
# r3 = robot.Robot((0,6), hour_min_to_sec(10,0), matrix_map2)
# r3.weighted_astar_path_plan_timeframes_combined((8,6), [prob_heatmaps1,prob_heatmaps2], 90)
#
# r1.path.plot_path()
# r2.path.plot_path()
# r3.path.plot_path()